[
  {
    "objectID": "data_analysis.html",
    "href": "data_analysis.html",
    "title": "Data Analysis",
    "section": "",
    "text": "import pandas as pd\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# 1. Read the CSV file\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\n\n# 2. Columns to drop (if they exist)\ncolumns_to_drop = [\n    \"ID\", \"URL\", \"ACTIVE_URLS\", \"DUPLICATES\", \"LAST_UPDATED_TIMESTAMP\",\n    \"NAICS2\", \"NAICS3\", \"NAICS4\", \"NAICS5\", \"NAICS6\",\n    \"SOC_2\", \"SOC_3\", \"SOC_5\"\n]\n# Filter out columns that actually exist in the DataFrame to avoid KeyError\nvalid_cols_to_drop = [col for col in columns_to_drop if col in df.columns]\ndf.drop(columns=valid_cols_to_drop, inplace=True)\n\n# 3. Visualize missing values\nmsno.heatmap(df)\nplt.title(\"Missing Values Heatmap\")\nplt.show()\n\n# 4. Basic missing value processing\ndf.dropna(thresh=len(df) * 0.5, axis=1, inplace=True) # If a column has more than 50% missing values, delete it.\n\n# If there is a 'SALARY' column, fill missing values with the median.\nif \"SALARY\" in df.columns:\n    df[\"SALARY\"].fillna(df[\"SALARY\"].median(), inplace=True)\n# If there is an 'Industry' column, fill missing values with 'Unknown'.\nif \"Industry\" in df.columns:\n    df[\"Industry\"].fillna(\"Unknown\", inplace=True)\n\n# 5. Remove duplicates\ndf.drop_duplicates(subset=[\"TITLE\", \"COMPANY\", \"LOCATION\", \"POSTED\"], keep=\"first\", inplace=True)\n\n# 6. Number of job postings by industry\nif \"Industry\" in df.columns:\n    fig = px.bar(df[\"Industry\"].value_counts(), title=\"Job Postings by Industry\")\n    fig.show()\n\n# 7. Salary distribution by industry\n#   Only plot if both 'SALARY' and 'Industry' are present in the dataset\nif \"SALARY\" in df.columns and \"Industry\" in df.columns:\n    fig = px.box(df, x=\"Industry\", y=\"SALARY\", title=\"Salary Distribution by Industry\")\n    fig.show()\n\n# 8. Remote vs On-Site job proportion\n#   If there is a 'REMOTE_TYPE_NAME' column, create a pie chart\nif \"REMOTE_TYPE_NAME\" in df.columns:\n    fig = px.pie(df, names=\"REMOTE_TYPE_NAME\", title=\"Remote vs. On-Site Jobs\")\n    fig.show()\n\n# 9. Job postings trend over time\n#   If there is a 'POSTED' column, create a time series chart\nif \"POSTED\" in df.columns:\n    df['POSTED'] = pd.to_datetime(df['POSTED'], errors='coerce')\n    postings_over_time = df['POSTED'].value_counts().sort_index()\n    fig = px.line(x=postings_over_time.index, y=postings_over_time.values, labels={'x': 'Date Posted', 'y': 'Number of Job Postings'}, title=\"Job Postings Over Time\")\n    fig.show()"
  },
  {
    "objectID": "data_analysis.html#data-cleaning-preprocessing",
    "href": "data_analysis.html#data-cleaning-preprocessing",
    "title": "Data Analysis",
    "section": "",
    "text": "import pandas as pd\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# 1. Read the CSV file\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\n\n# 2. Columns to drop (if they exist)\ncolumns_to_drop = [\n    \"ID\", \"URL\", \"ACTIVE_URLS\", \"DUPLICATES\", \"LAST_UPDATED_TIMESTAMP\",\n    \"NAICS2\", \"NAICS3\", \"NAICS4\", \"NAICS5\", \"NAICS6\",\n    \"SOC_2\", \"SOC_3\", \"SOC_5\"\n]\n# Filter out columns that actually exist in the DataFrame to avoid KeyError\nvalid_cols_to_drop = [col for col in columns_to_drop if col in df.columns]\ndf.drop(columns=valid_cols_to_drop, inplace=True)\n\n# 3. Visualize missing values\nmsno.heatmap(df)\nplt.title(\"Missing Values Heatmap\")\nplt.show()\n\n# 4. Basic missing value processing\ndf.dropna(thresh=len(df) * 0.5, axis=1, inplace=True) # If a column has more than 50% missing values, delete it.\n\n# If there is a 'SALARY' column, fill missing values with the median.\nif \"SALARY\" in df.columns:\n    df[\"SALARY\"].fillna(df[\"SALARY\"].median(), inplace=True)\n# If there is an 'Industry' column, fill missing values with 'Unknown'.\nif \"Industry\" in df.columns:\n    df[\"Industry\"].fillna(\"Unknown\", inplace=True)\n\n# 5. Remove duplicates\ndf.drop_duplicates(subset=[\"TITLE\", \"COMPANY\", \"LOCATION\", \"POSTED\"], keep=\"first\", inplace=True)\n\n# 6. Number of job postings by industry\nif \"Industry\" in df.columns:\n    fig = px.bar(df[\"Industry\"].value_counts(), title=\"Job Postings by Industry\")\n    fig.show()\n\n# 7. Salary distribution by industry\n#   Only plot if both 'SALARY' and 'Industry' are present in the dataset\nif \"SALARY\" in df.columns and \"Industry\" in df.columns:\n    fig = px.box(df, x=\"Industry\", y=\"SALARY\", title=\"Salary Distribution by Industry\")\n    fig.show()\n\n# 8. Remote vs On-Site job proportion\n#   If there is a 'REMOTE_TYPE_NAME' column, create a pie chart\nif \"REMOTE_TYPE_NAME\" in df.columns:\n    fig = px.pie(df, names=\"REMOTE_TYPE_NAME\", title=\"Remote vs. On-Site Jobs\")\n    fig.show()\n\n# 9. Job postings trend over time\n#   If there is a 'POSTED' column, create a time series chart\nif \"POSTED\" in df.columns:\n    df['POSTED'] = pd.to_datetime(df['POSTED'], errors='coerce')\n    postings_over_time = df['POSTED'].value_counts().sort_index()\n    fig = px.line(x=postings_over_time.index, y=postings_over_time.values, labels={'x': 'Date Posted', 'y': 'Number of Job Postings'}, title=\"Job Postings Over Time\")\n    fig.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Salary and Compensation Trends in AI Careers",
    "section": "",
    "text": "Our team chose Salary Disparities Across Disciplines: Who Benefits Most from AI’s Rise?  as our research topic. Due to the rapid development of AI chatbots and substantial infrastructure investments by companies such as OpenAI, Google, NVIDIA, and DeepSeek, a significant restructuring of the current workforce appears inevitable. Some existing occupations will diminish or potentially disappear, while new roles will emerge and command higher compensation. Understanding these changes, identifying potential trends, and analyzing reliable data regarding AI’s impact are of paramount importance.\n\n\n\n\nThe rapid advancement of AI is transforming the workforce by reshaping job opportunities and salary structures. While AI-driven technologies enhance productivity and facilitate the emergence of new roles, they also contribute to job displacement, particularly in routine-based occupations.\nEmpirical studies have demonstrated that automation has been a key driver of income inequality (Adhikari (2024)), disproportionately impacting middle-skilled and less-educated workers. Conversely, AI-driven professions are experiencing new work opportunities, particularly in technology-related fields, necessitating a shift in workforce skills and adaptability.\nThe adoption of AI technologies brings wage volatility and job opportunities across different income groups. While AI roles often require unique, high-demand skillsets within specific occupations, it is overall important to implement policy measures to reduce the variations in industry adoption and workforce accessibility. As AI reshapes job requirements, reskilling becomes imperative, particularly for non-technical workers who are at higher risk of displacement. Addressing the digital skills gap through targeted training programs is essential to ensuring workforce adaptability and mitigating the socioeconomic disruptions caused by AI-driven labor market transformations.\n\n\n\n\nThe rapid advancement of AI has led to an increasing market demand for AI-related skills, significantly influencing employment trends and salary structures in the United States. Studies suggest that various job sectors are highly susceptible to AI-driven transformation, including those in traditionally high-skilled industries (Colombo et al. (2024)).\nSimilarly, in China, the demand for AI professionals surged in 2024, particularly in specialized domains such as healthcare and applied sciences, as companies sought to attract top talent in these fields. Salaries for AI specialists have risen substantially. Moreover, the growing competition in the AI sector has reshaped existing salary distributions. AI-related professions offer higher salary premiums and employment benefits compared to traditional IT engineering roles, potentially exacerbating the wage disparity between AI professionals and non-AI professionals, thereby influencing labor market equilibrium (Stone, Lukaszewski, and Johnson (2024)).\nAI is fundamentally transforming labor markets across various industries, exerting a significant influence on wage structures depending on job characteristics. Repetitive rule-based tasks, such as basic data entry or customer service automation, are highly susceptible to AI-driven automation, reducing the demand for such roles in the labor market, thereby cutting down employment opportunities and lowering compensation obtained. For instance, AI has been widely adopted in human resources management candidate screening, prompting some employers to lessen workforce hiring needs (Sezgin (2023)).\nConversely, occupations requiring advanced cognitive skills, creativity, or interpersonal communication—such as those in professional services—are less likely to be fully replaced by AI and may instead benefit from hybrid automation models.\n\nMedical field: AI-powered diagnostic tools have enhanced precision and efficiency in medical decision-making, but final assessments still rely heavily on human expertise (Ansari and Ansari (2024)).\nLegal sector: AI-driven automation has accelerated case analysis and legal procedures, but complex legal judgments continue to rely on human practitioners. Harvard Law Professor David Wilkins has found that while generative AI has the potential to transform legal practices, the primary role remains that of a supportive tool rather than a replacement.\nFinance and Governance: Industries with a focus on financial and governance decision-making may experience wage polarization due to AI-induced advancements, where professionals may experience wage growth due to AI-driven productivity enhancements.\n\n\n\n\n\nOur research encompasses various aspects of salary disparities. Specifically, we aim to investigate: - Income and job distribution differences, including an analysis of which geographical regions see the highest demand and wage disparities for both AI-related and traditional professional roles. - Comprehensive analysis of recent datasets, identifying the most sought-after required skills among job listings. - The differential impact of AI-driven changes on high-skill versus middle-skill occupations.\n\n\n\n\n(Your analysis and charts here)\n\n\n\n(Your findings on different states/cities)\n\n\n\n(Comparison of remote jobs vs. in-office jobs)\n\n\n\n(Which industries are growing the fastest?)"
  },
  {
    "objectID": "index.html#research-rationale",
    "href": "index.html#research-rationale",
    "title": "Salary and Compensation Trends in AI Careers",
    "section": "",
    "text": "Our team chose Salary Disparities Across Disciplines: Who Benefits Most from AI’s Rise?  as our research topic. Due to the rapid development of AI chatbots and substantial infrastructure investments by companies such as OpenAI, Google, NVIDIA, and DeepSeek, a significant restructuring of the current workforce appears inevitable. Some existing occupations will diminish or potentially disappear, while new roles will emerge and command higher compensation. Understanding these changes, identifying potential trends, and analyzing reliable data regarding AI’s impact are of paramount importance."
  },
  {
    "objectID": "index.html#why-is-this-topic-important",
    "href": "index.html#why-is-this-topic-important",
    "title": "Salary and Compensation Trends in AI Careers",
    "section": "",
    "text": "The rapid advancement of AI is transforming the workforce by reshaping job opportunities and salary structures. While AI-driven technologies enhance productivity and facilitate the emergence of new roles, they also contribute to job displacement, particularly in routine-based occupations.\nEmpirical studies have demonstrated that automation has been a key driver of income inequality (Adhikari (2024)), disproportionately impacting middle-skilled and less-educated workers. Conversely, AI-driven professions are experiencing new work opportunities, particularly in technology-related fields, necessitating a shift in workforce skills and adaptability.\nThe adoption of AI technologies brings wage volatility and job opportunities across different income groups. While AI roles often require unique, high-demand skillsets within specific occupations, it is overall important to implement policy measures to reduce the variations in industry adoption and workforce accessibility. As AI reshapes job requirements, reskilling becomes imperative, particularly for non-technical workers who are at higher risk of displacement. Addressing the digital skills gap through targeted training programs is essential to ensuring workforce adaptability and mitigating the socioeconomic disruptions caused by AI-driven labor market transformations."
  },
  {
    "objectID": "index.html#trend-analysis-of-ai-development-and-salary-fluctuations",
    "href": "index.html#trend-analysis-of-ai-development-and-salary-fluctuations",
    "title": "Salary and Compensation Trends in AI Careers",
    "section": "",
    "text": "The rapid advancement of AI has led to an increasing market demand for AI-related skills, significantly influencing employment trends and salary structures in the United States. Studies suggest that various job sectors are highly susceptible to AI-driven transformation, including those in traditionally high-skilled industries (Colombo et al. (2024)).\nSimilarly, in China, the demand for AI professionals surged in 2024, particularly in specialized domains such as healthcare and applied sciences, as companies sought to attract top talent in these fields. Salaries for AI specialists have risen substantially. Moreover, the growing competition in the AI sector has reshaped existing salary distributions. AI-related professions offer higher salary premiums and employment benefits compared to traditional IT engineering roles, potentially exacerbating the wage disparity between AI professionals and non-AI professionals, thereby influencing labor market equilibrium (Stone, Lukaszewski, and Johnson (2024)).\nAI is fundamentally transforming labor markets across various industries, exerting a significant influence on wage structures depending on job characteristics. Repetitive rule-based tasks, such as basic data entry or customer service automation, are highly susceptible to AI-driven automation, reducing the demand for such roles in the labor market, thereby cutting down employment opportunities and lowering compensation obtained. For instance, AI has been widely adopted in human resources management candidate screening, prompting some employers to lessen workforce hiring needs (Sezgin (2023)).\nConversely, occupations requiring advanced cognitive skills, creativity, or interpersonal communication—such as those in professional services—are less likely to be fully replaced by AI and may instead benefit from hybrid automation models.\n\nMedical field: AI-powered diagnostic tools have enhanced precision and efficiency in medical decision-making, but final assessments still rely heavily on human expertise (Ansari and Ansari (2024)).\nLegal sector: AI-driven automation has accelerated case analysis and legal procedures, but complex legal judgments continue to rely on human practitioners. Harvard Law Professor David Wilkins has found that while generative AI has the potential to transform legal practices, the primary role remains that of a supportive tool rather than a replacement.\nFinance and Governance: Industries with a focus on financial and governance decision-making may experience wage polarization due to AI-induced advancements, where professionals may experience wage growth due to AI-driven productivity enhancements."
  },
  {
    "objectID": "index.html#what-do-you-expect-to-find-in-your-analysis",
    "href": "index.html#what-do-you-expect-to-find-in-your-analysis",
    "title": "Salary and Compensation Trends in AI Careers",
    "section": "",
    "text": "Our research encompasses various aspects of salary disparities. Specifically, we aim to investigate: - Income and job distribution differences, including an analysis of which geographical regions see the highest demand and wage disparities for both AI-related and traditional professional roles. - Comprehensive analysis of recent datasets, identifying the most sought-after required skills among job listings. - The differential impact of AI-driven changes on high-skill versus middle-skill occupations."
  },
  {
    "objectID": "index.html#ai-vs.-non-ai-salary-comparison",
    "href": "index.html#ai-vs.-non-ai-salary-comparison",
    "title": "Salary and Compensation Trends in AI Careers",
    "section": "",
    "text": "(Your analysis and charts here)"
  },
  {
    "objectID": "index.html#geographic-salary-trends",
    "href": "index.html#geographic-salary-trends",
    "title": "Salary and Compensation Trends in AI Careers",
    "section": "",
    "text": "(Your findings on different states/cities)"
  },
  {
    "objectID": "index.html#remote-vs.-on-site-salary-differences",
    "href": "index.html#remote-vs.-on-site-salary-differences",
    "title": "Salary and Compensation Trends in AI Careers",
    "section": "",
    "text": "(Comparison of remote jobs vs. in-office jobs)"
  },
  {
    "objectID": "index.html#industry-salary-growth-in-2024",
    "href": "index.html#industry-salary-growth-in-2024",
    "title": "Salary and Compensation Trends in AI Careers",
    "section": "",
    "text": "(Which industries are growing the fastest?)"
  },
  {
    "objectID": "project4.html",
    "href": "project4.html",
    "title": "Project 4",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\n\ncolumns_to_drop = [\n    \"ID\", \"URL\", \"ACTIVE_URLS\", \"DUPLICATES\", \"LAST_UPDATED_TIMESTAMP\",\n    \"NAICS2\", \"NAICS3\", \"NAICS4\", \"NAICS5\", \"NAICS6\",\n    \"SOC_2\", \"SOC_3\", \"SOC_5\"\n]\nvalid_cols_to_drop = [col for col in columns_to_drop if col in df.columns]\ndf.drop(columns=valid_cols_to_drop, inplace=True)\n\ndf.dropna(thresh=len(df) * 0.5, axis=1, inplace=True) \n\nif \"SALARY\" in df.columns:\n    df[\"SALARY\"].fillna(df[\"SALARY\"].median(), inplace=True)\nif \"Industry\" in df.columns:\n    df[\"Industry\"].fillna(\"Unknown\", inplace=True)\n\ndf.drop_duplicates(subset=[\"TITLE\", \"COMPANY\", \"LOCATION\", \"POSTED\"], keep=\"first\", inplace=True)\n\nif \"POSTED\" in df.columns:\n    df['POSTED'] = pd.to_datetime(df['POSTED'], errors='coerce')\n\n/var/folders/z6/j54j6tys1bbdr2gqg5vfm6tw0000gn/T/ipykernel_13534/705840187.py:3: DtypeWarning: Columns (19,30) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(\"lightcast_job_postings.csv\")\n\n\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\n\ncols_to_use = ['NAICS_2022_5_NAME', 'EMPLOYMENT_TYPE_NAME', 'REMOTE_TYPE_NAME', 'EDUCATION_LEVELS_NAME']\n\ndf_kmeans = df[cols_to_use].dropna()\n\n\nX = pd.get_dummies(df_kmeans)\n\n\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\ninertias = []\nK_range = range(1, 15) \n\nfor k in K_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    kmeans.fit(X)\n    inertias.append(kmeans.inertia_)\n\nplt.figure(figsize=(8,5))\nplt.plot(K_range, inertias, marker='o')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Inertia')\nplt.title('Elbow Method for Optimal k (Multi-Feature)')\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\nk_optimal = 4\n\nkmeans_final = KMeans(n_clusters=k_optimal, random_state=42, n_init=10)\ndf_kmeans['cluster'] = kmeans_final.fit_predict(X)\n\nprint(df_kmeans['cluster'].value_counts())\n\ncluster\n0    23580\n2    18064\n3    15794\n1    11743\nName: count, dtype: int64\n\n\n\nprint(df_kmeans.head())\n\n                            NAICS_2022_5_NAME    EMPLOYMENT_TYPE_NAME  \\\n0  Automotive Parts and Accessories Retailers  Full-time (&gt; 32 hours)   \n1                     Temporary Help Services  Full-time (&gt; 32 hours)   \n2          Other Insurance Related Activities  Full-time (&gt; 32 hours)   \n3                          Commercial Banking  Full-time (&gt; 32 hours)   \n4                       Unclassified Industry   Part-time / full-time   \n\n  REMOTE_TYPE_NAME          EDUCATION_LEVELS_NAME  cluster  \n0           [None]    [\\n  \"Bachelor's degree\"\\n]        0  \n1           Remote  [\\n  \"No Education Listed\"\\n]        1  \n2           [None]    [\\n  \"Bachelor's degree\"\\n]        0  \n3           [None]  [\\n  \"No Education Listed\"\\n]        2  \n4           [None]  [\\n  \"No Education Listed\"\\n]        2  \n\n\n\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\n\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X)\n\npca_df = pd.DataFrame(data=X_pca, columns=['PCA1', 'PCA2'])\npca_df['cluster'] = df_kmeans['cluster'].values\n\nplt.figure(figsize=(8,6))\nsns.scatterplot(\n    x='PCA1', y='PCA2',\n    hue='cluster',\n    palette='tab10',\n    data=pca_df,\n    legend='full',\n    alpha=0.8\n)\nplt.title('KMeans Clustering with Multiple Features (PCA Reduced)')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.legend(title='Cluster')\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\nfeatures = ['NAICS_2022_5_NAME', 'EMPLOYMENT_TYPE_NAME', 'REMOTE_TYPE_NAME', 'EDUCATION_LEVELS_NAME']\n\nprofile_summary = []\n\nfor cluster_label in sorted(df_kmeans['cluster'].unique()):\n    cluster_data = df_kmeans[df_kmeans['cluster'] == cluster_label]\n    \n    top_features = {}\n    for feature in features:\n        if cluster_data[feature].nunique() &gt; 0:\n            if feature == 'EDUCATION_LEVELS_NAME':\n                clean_edu = cluster_data[feature].astype(str).str.replace(r'[\\[\\]\\n\\\"]', '', regex=True)  # 去掉[], \\n, \"这些符号\n                clean_edu = clean_edu.str.split(',').str[0] \n                top_features[feature] = clean_edu.value_counts().idxmax()\n            else:\n                top_features[feature] = cluster_data[feature].value_counts().idxmax()\n        else:\n            top_features[feature] = 'N/A'\n    \n    profile_summary.append({\n        'Cluster': cluster_label,\n        'Top NAICS_2022_5_NAME': top_features['NAICS_2022_5_NAME'],\n        'Top Employment Type': top_features['EMPLOYMENT_TYPE_NAME'],\n        'Top Remote Type': top_features['REMOTE_TYPE_NAME'],\n        'Top Education Level': top_features['EDUCATION_LEVELS_NAME']\n        })\n\nprofile_df = pd.DataFrame(profile_summary)\n\nprint(profile_df)\n\n   Cluster                         Top NAICS_2022_5_NAME  \\\n0        0                         Unclassified Industry   \n1        1                         Unclassified Industry   \n2        2  Computer Systems Design and Related Services   \n3        3  Computer Systems Design and Related Services   \n\n      Top Employment Type Top Remote Type    Top Education Level  \n0  Full-time (&gt; 32 hours)          [None]      Bachelor's degree  \n1  Full-time (&gt; 32 hours)          Remote      Bachelor's degree  \n2  Full-time (&gt; 32 hours)          [None]    No Education Listed  \n3  Full-time (&gt; 32 hours)          [None]      Bachelor's degree  \n\n\nIn this project, we used the KMeans clustering model to group job postings based on several key features: industry classification (NAICS codes), employment type (full-time or part-time), remote work type (remote, on-site, or hybrid), and minimum education requirements (such as bachelor’s or master’s degrees). The purpose of clustering was to identify distinct groups within the job market and provide more targeted career insights and recommendations for job seekers.\nWe selected four features for clustering: NAICS_2022_5_NAME, EMPLOYMENT_TYPE_NAME, REMOTE_TYPE_NAME, and EDUCATION_LEVELS_NAME. After applying one-hot encoding to these categorical variables, we used the KMeans algorithm to build the model. To determine the optimal number of clusters, we used the Elbow Method and selected k=4, which divided the data into four distinct job groups. We then reduced the dimensionality of the clustered data to two components using PCA and visualized the results. The clusters were clearly separated and showed good internal consistency.\nThrough analysis of the clustering results, we found the following: Cluster 0 mainly consists of jobs classified under “Unclassified Industry,” with most being full-time positions, low levels of remote work, and a majority requiring a bachelor’s degree. Cluster 1 also contains jobs from unclassified industries, but with a higher proportion of remote work opportunities, making it suitable for those who prefer remote jobs. Clusters 2 and 3 are primarily composed of jobs in “Computer Systems Design and Related Services,” with higher education requirements, often needing a master’s degree or higher. These clusters are more appropriate for technical job seekers.\nBased on the cluster characteristics, we recommend that job seekers who prefer remote work focus on opportunities within Cluster 1. Those with advanced degrees and technical backgrounds should prioritize jobs in Clusters 2 and 3. Entry-level candidates or those with lower education requirements may find suitable opportunities in Cluster 0.\n\nimport pandas as pd\n\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\n\ncolumns_to_drop = [\n    \"ID\", \"URL\", \"ACTIVE_URLS\", \"DUPLICATES\", \"LAST_UPDATED_TIMESTAMP\",\n    \"NAICS2\", \"NAICS3\", \"NAICS4\", \"NAICS5\", \"NAICS6\",\n    \"SOC_2\", \"SOC_3\", \"SOC_5\"\n]\nvalid_cols_to_drop = [col for col in columns_to_drop if col in df.columns]\ndf.drop(columns=valid_cols_to_drop, inplace=True)\n\nif \"SALARY\" in df.columns:\n    df[\"SALARY\"].fillna(df[\"SALARY\"].median(), inplace=True)\nif \"Industry\" in df.columns:\n    df[\"Industry\"].fillna(\"Unknown\", inplace=True)\ndf[\"MIN_YEARS_EXPERIENCE\"] = df[\"MIN_YEARS_EXPERIENCE\"].fillna(df[\"MIN_YEARS_EXPERIENCE\"].median())\n\ndf.drop_duplicates(subset=[\"TITLE\", \"COMPANY\", \"LOCATION\", \"POSTED\"], keep=\"first\", inplace=True)\n\nif \"POSTED\" in df.columns:\n    df['POSTED'] = pd.to_datetime(df['POSTED'], errors='coerce')\n\n/var/folders/z6/j54j6tys1bbdr2gqg5vfm6tw0000gn/T/ipykernel_13534/2645817170.py:3: DtypeWarning: Columns (19,30) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(\"lightcast_job_postings.csv\")\n/var/folders/z6/j54j6tys1bbdr2gqg5vfm6tw0000gn/T/ipykernel_13534/2645817170.py:14: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df[\"SALARY\"].fillna(df[\"SALARY\"].median(), inplace=True)\n\n\n\ncols_to_check = [\n    'EMPLOYMENT_TYPE_NAME', \n    'REMOTE_TYPE_NAME', \n    'EDUCATION_LEVELS_NAME', \n    'NAICS_2022_5_NAME', \n    'TITLE_NAME', \n    'SALARY',\n    'MIN_YEARS_EXPERIENCE'\n]\n\nmissing_counts = df[cols_to_check].isnull().sum()\n\nprint(missing_counts)\n\nEMPLOYMENT_TYPE_NAME     17\nREMOTE_TYPE_NAME         17\nEDUCATION_LEVELS_NAME    17\nNAICS_2022_5_NAME        17\nTITLE_NAME               17\nSALARY                    0\nMIN_YEARS_EXPERIENCE      0\ndtype: int64\n\n\n\ncols_to_use = [\n    'EMPLOYMENT_TYPE_NAME', \n    'REMOTE_TYPE_NAME', \n    'EDUCATION_LEVELS_NAME',  \n    'TITLE_NAME', \n    'NAICS_2022_5_NAME',\n    'SALARY'\n]\ndf_regression = df[cols_to_use].dropna()\n\ny = df_regression['SALARY']\n\nX = pd.get_dummies(df_regression.drop('SALARY', axis=1), drop_first=True)\n\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=688)\n\n\nfrom sklearn.linear_model import LinearRegression\n\nlr_model = LinearRegression()\nlr_model.fit(X_train, y_train)\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LinearRegression?Documentation for LinearRegressioniFittedLinearRegression() \n\n\n\ny_pred = lr_model.predict(X_test)\n\n\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport numpy as np\n\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nr2 = r2_score(y_test, y_pred)\n\nprint(f\"RMSE: {rmse:.2f}\")\nprint(f\"R²: {r2:.4f}\")\n\nRMSE: 24855.89\nR²: 0.2912\n\n\n\nimport pandas as pd\n\ncoef_df = pd.DataFrame({\n    'Feature': X_train.columns,\n    'Coefficient': lr_model.coef_\n})\n\ncoef_df['Coefficient_Abs'] = coef_df['Coefficient'].abs()\ncoef_df = coef_df.sort_values(by='Coefficient_Abs', ascending=False)\n\nprint(coef_df.head(20))\n\n                                        Feature    Coefficient  \\\n5571          TITLE_NAME_Urgent Care Physicians  251386.121082   \n3976           TITLE_NAME_Portfolio Strategists  218543.202752   \n677    TITLE_NAME_Business Performance Analysts  200638.126095   \n4260           TITLE_NAME_Psychiatry Physicians  198843.552601   \n3135        TITLE_NAME_Lead Security Architects  189207.776080   \n4020         TITLE_NAME_Primary Care Physicians  157627.519893   \n1699  TITLE_NAME_Digital Verification Engineers  153248.368916   \n866       TITLE_NAME_Certified Tumor Registrars  144003.199611   \n1759   TITLE_NAME_Directors of Global Logistics  138363.896627   \n5113              TITLE_NAME_Staff IT Engineers  133667.627850   \n2085    TITLE_NAME_Enterprise Services Managers  133393.234468   \n2169    TITLE_NAME_Executive Business Directors  131837.191508   \n5668      TITLE_NAME_Water/Wastewater Engineers  131641.345181   \n893         TITLE_NAME_Chief Systems Architects  130059.716545   \n3209                TITLE_NAME_Loan Specialists  128697.981039   \n2927            TITLE_NAME_Insurance Executives  127916.188998   \n4443           TITLE_NAME_Regulatory Associates  127037.822853   \n1278      TITLE_NAME_Counterintelligence Agents  116219.281719   \n5097            TITLE_NAME_Sponsorship Managers  114539.904505   \n121      TITLE_NAME_Actuarial Services Managers  110330.218256   \n\n      Coefficient_Abs  \n5571    251386.121082  \n3976    218543.202752  \n677     200638.126095  \n4260    198843.552601  \n3135    189207.776080  \n4020    157627.519893  \n1699    153248.368916  \n866     144003.199611  \n1759    138363.896627  \n5113    133667.627850  \n2085    133393.234468  \n2169    131837.191508  \n5668    131641.345181  \n893     130059.716545  \n3209    128697.981039  \n2927    127916.188998  \n4443    127037.822853  \n1278    116219.281719  \n5097    114539.904505  \n121     110330.218256  \n\n\nIn this project, we used a linear regression model to predict salary levels based mainly on the job title feature (TITLE_NAME). The model results show that roles in healthcare, such as Urgent Care Physicians and Psychiatry Physicians, as well as positions in finance like Portfolio Strategists and IT security roles like Lead Security Architects, have a strong positive impact on salary levels. This means that jobs requiring high specialization and in-demand skills tend to offer higher salaries. For job seekers, these findings provide useful guidance for career planning and salary expectations. People who aim for higher-paying jobs might consider focusing on fields like healthcare, finance, or IT security. However, it is also important to understand that these roles often come with higher professional requirements and work pressure. When making career choices, it is important to match personal interests, skills, and strengths with realistic goals. Companies can also use this insight to better design competitive salary strategies and attract top talent.\n\nimport plotly.express as px\n\nresults_df = pd.DataFrame({\n    'Actual Salary': y_test,\n    'Predicted Salary': y_pred\n})\n\nfig = px.scatter(\n    results_df, \n    x='Actual Salary', \n    y='Predicted Salary',\n    title=\"Actual vs Predicted Salaries\",\n    labels={\"x\": \"Actual Salary\", \"y\": \"Predicted Salary\"},\n    template=\"plotly_white\"\n)\n\nfig.add_shape(\n    type='line',\n    x0=results_df['Actual Salary'].min(), y0=results_df['Actual Salary'].min(),\n    x1=results_df['Actual Salary'].max(), y1=results_df['Actual Salary'].max(),\n    line=dict(color='red', dash='dash')\n)\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nThe scatter plot shows the model’s prediction performance. The x-axis represents the actual salary, and the y-axis shows the predicted salary. The red dashed line represents a perfect prediction line. Overall, the model captures the general trend of salary changes fairly well. However, in the higher salary range, especially for jobs over 200,000 dollars per year, the model tends to underestimate salaries and shows larger prediction errors. In the lower salary range, especially for jobs below 100,000 dollars, the model predicts more accurately.\nThis suggests that while the model provides helpful salary estimates, job seekers should use it carefully, especially when applying for high-paying positions. It is important to also consider personal background, industry trends, and specific job requirements. For those targeting high salaries, additional preparation, such as improving professional skills and gaining more experience, can help address the model’s potential underestimation.\n\nimport plotly.graph_objects as go\n\nfeature_importance = pd.Series(lr_model.coef_, index=X_train.columns)\n\nfeature_importance = feature_importance.abs().sort_values(ascending=False).head(20)\n\nfig = go.Figure(go.Bar(\n    x=feature_importance.values,\n    y=feature_importance.index,\n    orientation='h'\n))\n\nfig.update_layout(\n    title=\"Top 20 Feature Importances (Linear Regression Coefficients)\",\n    xaxis_title=\"Coefficient Magnitude\",\n    yaxis_title=\"Features\",\n    template=\"plotly_white\"\n)\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nFrom the feature importance chart, we can see that the model’s explanation of salary differences is highly concentrated around a small group of high-impact job titles. This suggests that selecting roles in key industries like healthcare, finance, and IT can significantly influence salary outcomes.\nFor job seekers, aiming for these impactful roles can greatly improve earning potential. On the other hand, for roles with lower feature importance, it might be a good idea to adjust salary expectations based on the broader market. People working in these positions can also consider developing new skills or transitioning into fields with stronger market demand to boost their career development and salary prospects."
  }
]