---
title: "Skill Gap Analysis"     
format: html
kernel: python3                     
execute:
  echo: true                    
  eval: true                     
---

## 3.1 Skill Gap Analysis

### 3.1.1 Team Skill Self-Assessment
```{python}

import pandas as pd

# Team members and their self-rated proficiency (1–5)
skills_data = {
    "Name":      ["Deyang", "Yani", "Jiapei", "Junhao"],
    "Python":            [4,       3,       2,        5],
    "SQL":               [3,       2,       4,        3],
    "Machine Learning":  [2,       1,       3,        4],
    "Cloud Computing":   [1,       2,       2,        3]
}

df_skills = pd.DataFrame(skills_data).set_index("Name")
df_skills
```

3.1.2 Compare to Market Demand
```{python}
# read cleaned job postings
df = pd.read_csv("data/lightcast_job_postings_cleaned.csv")

# use the same skill columns
top_skills = df_skills.columns.tolist()

# count occurrences of each skill keyword in the job BODY
job_text = df["BODY"].fillna("")
skill_counts = {s: job_text.str.contains(s, case=False).sum() for s in top_skills}

# append a Market Demand row
df_skills.loc["Market Demand"] = [skill_counts[s] for s in top_skills]
df_skills
```

3.1.3 Visualize Skill Gaps
```{python}
import matplotlib.pyplot as plt

# skills only
plt.figure(figsize=(6,2))
plt.imshow(df_skills.iloc[:-1], aspect="auto")               # drop the Market Demand row
plt.colorbar(label="Skill Level (1–5)")
plt.yticks(range(4), df_skills.index[:-1])
plt.xticks(range(len(df_skills.columns)), df_skills.columns, rotation=45, ha="right")
plt.title("Team Skill Levels")
plt.tight_layout()
plt.show()

# demand only
plt.figure(figsize=(6,2))
plt.imshow([df_skills.loc["Market Demand"]], aspect="auto")  # just the demand row
plt.colorbar(label="Market Demand Count")
plt.yticks([0], ["Market Demand"])
plt.xticks(range(len(df_skills.columns)), df_skills.columns, rotation=45, ha="right")
plt.title("Market Demand by Skill")
plt.tight_layout()
plt.show()
```

